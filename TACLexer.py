# Generated from TAC.g4 by ANTLR 4.8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\35")
        buf.write("\u009f\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\3\2\3\2\3\3\3")
        buf.write("\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\5\3\5\3\6\3\6\3\6")
        buf.write("\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\b\3")
        buf.write("\t\3\t\3\t\3\t\3\t\3\n\3\n\3\13\3\13\3\f\3\f\3\f\3\f\3")
        buf.write("\f\3\r\3\r\3\16\3\16\3\17\3\17\3\20\3\20\3\20\3\21\3\21")
        buf.write("\3\21\3\22\3\22\3\23\3\23\3\23\3\24\3\24\3\24\3\25\3\25")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\27\3\27\3\27\3\30\3\30\3\30\3\31\3\31\3\31\3\32\3\32")
        buf.write("\7\32\u0092\n\32\f\32\16\32\u0095\13\32\3\33\6\33\u0098")
        buf.write("\n\33\r\33\16\33\u0099\3\34\3\34\3\34\3\34\2\2\35\3\3")
        buf.write("\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16")
        buf.write("\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61")
        buf.write("\32\63\33\65\34\67\35\3\2\6\3\2c|\5\2\62;C\\c|\3\2\62")
        buf.write(";\4\2\13\13\"\"\2\u00a0\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3")
        buf.write("\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2")
        buf.write("\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2")
        buf.write("\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2")
        buf.write("!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2")
        buf.write("\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3")
        buf.write("\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\39\3\2\2\2\5;\3\2\2\2")
        buf.write("\7=\3\2\2\2\tE\3\2\2\2\13G\3\2\2\2\rJ\3\2\2\2\17Q\3\2")
        buf.write("\2\2\21W\3\2\2\2\23\\\3\2\2\2\25^\3\2\2\2\27`\3\2\2\2")
        buf.write("\31e\3\2\2\2\33g\3\2\2\2\35i\3\2\2\2\37k\3\2\2\2!n\3\2")
        buf.write("\2\2#q\3\2\2\2%s\3\2\2\2\'v\3\2\2\2)y\3\2\2\2+{\3\2\2")
        buf.write("\2-\u0086\3\2\2\2/\u0089\3\2\2\2\61\u008c\3\2\2\2\63\u008f")
        buf.write("\3\2\2\2\65\u0097\3\2\2\2\67\u009b\3\2\2\29:\7\f\2\2:")
        buf.write("\4\3\2\2\2;<\7<\2\2<\6\3\2\2\2=>\7>\2\2>?\7P\2\2?@\7Q")
        buf.write("\2\2@A\7\"\2\2AB\7Q\2\2BC\7R\2\2CD\7@\2\2D\b\3\2\2\2E")
        buf.write("F\7?\2\2F\n\3\2\2\2GH\7k\2\2HI\7h\2\2I\f\3\2\2\2JK\7t")
        buf.write("\2\2KL\7g\2\2LM\7v\2\2MN\7w\2\2NO\7t\2\2OP\7p\2\2P\16")
        buf.write("\3\2\2\2QR\7r\2\2RS\7c\2\2ST\7t\2\2TU\7c\2\2UV\7o\2\2")
        buf.write("V\20\3\2\2\2WX\7l\2\2XY\7w\2\2YZ\7o\2\2Z[\7r\2\2[\22\3")
        buf.write("\2\2\2\\]\7]\2\2]\24\3\2\2\2^_\7_\2\2_\26\3\2\2\2`a\7")
        buf.write("e\2\2ab\7c\2\2bc\7n\2\2cd\7n\2\2d\30\3\2\2\2ef\7,\2\2")
        buf.write("f\32\3\2\2\2gh\7-\2\2h\34\3\2\2\2ij\7/\2\2j\36\3\2\2\2")
        buf.write("kl\7?\2\2lm\7?\2\2m \3\2\2\2no\7#\2\2op\7?\2\2p\"\3\2")
        buf.write("\2\2qr\7@\2\2r$\3\2\2\2st\7@\2\2tu\7?\2\2u&\3\2\2\2vw")
        buf.write("\7>\2\2wx\7?\2\2x(\3\2\2\2yz\7>\2\2z*\3\2\2\2{|\7o\2\2")
        buf.write("|}\7g\2\2}~\7o\2\2~\177\7t\2\2\177\u0080\7g\2\2\u0080")
        buf.write("\u0081\7s\2\2\u0081\u0082\7w\2\2\u0082\u0083\7g\2\2\u0083")
        buf.write("\u0084\7u\2\2\u0084\u0085\7v\2\2\u0085,\3\2\2\2\u0086")
        buf.write("\u0087\7\'\2\2\u0087\u0088\5\63\32\2\u0088.\3\2\2\2\u0089")
        buf.write("\u008a\7B\2\2\u008a\u008b\5\63\32\2\u008b\60\3\2\2\2\u008c")
        buf.write("\u008d\7&\2\2\u008d\u008e\5\63\32\2\u008e\62\3\2\2\2\u008f")
        buf.write("\u0093\t\2\2\2\u0090\u0092\t\3\2\2\u0091\u0090\3\2\2\2")
        buf.write("\u0092\u0095\3\2\2\2\u0093\u0091\3\2\2\2\u0093\u0094\3")
        buf.write("\2\2\2\u0094\64\3\2\2\2\u0095\u0093\3\2\2\2\u0096\u0098")
        buf.write("\t\4\2\2\u0097\u0096\3\2\2\2\u0098\u0099\3\2\2\2\u0099")
        buf.write("\u0097\3\2\2\2\u0099\u009a\3\2\2\2\u009a\66\3\2\2\2\u009b")
        buf.write("\u009c\t\5\2\2\u009c\u009d\3\2\2\2\u009d\u009e\b\34\2")
        buf.write("\2\u009e8\3\2\2\2\5\2\u0093\u0099\3\b\2\2")
        return buf.getvalue()


class TACLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    LOCAL = 22
    LABEL = 23
    GLOBAL = 24
    ID = 25
    INT = 26
    WS = 27

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'\n'", "':'", "'<NO OP>'", "'='", "'if'", "'return'", "'param'", 
            "'jump'", "'['", "']'", "'call'", "'*'", "'+'", "'-'", "'=='", 
            "'!='", "'>'", "'>='", "'<='", "'<'", "'memrequest'" ]

    symbolicNames = [ "<INVALID>",
            "LOCAL", "LABEL", "GLOBAL", "ID", "INT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "LOCAL", "LABEL", "GLOBAL", "ID", "INT", "WS" ]

    grammarFileName = "TAC.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.8")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


